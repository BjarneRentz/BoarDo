/* tslint:disable */
/* eslint-disable */
/**
 * BoarDo.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SyncStateResult,
} from '../models';
import {
    SyncStateResultFromJSON,
    SyncStateResultToJSON,
} from '../models';

export interface ApiCalendarSyncEnablePostRequest {
    enable: boolean;
}

/**
 * 
 */
export class CalendarApi extends runtime.BaseAPI {

    /**
     */
    async apiCalendarGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Calendar`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async apiCalendarGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.apiCalendarGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCalendarSyncEnablePostRaw(requestParameters: ApiCalendarSyncEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.enable === null || requestParameters.enable === undefined) {
            throw new runtime.RequiredError('enable','Required parameter requestParameters.enable was null or undefined when calling apiCalendarSyncEnablePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Calendar/Sync/{enable}`.replace(`{${"enable"}}`, encodeURIComponent(String(requestParameters.enable))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCalendarSyncEnablePost(requestParameters: ApiCalendarSyncEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiCalendarSyncEnablePostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiCalendarSyncStateGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SyncStateResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Calendar/SyncState`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SyncStateResultFromJSON(jsonValue));
    }

    /**
     */
    async apiCalendarSyncStateGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SyncStateResult> {
        const response = await this.apiCalendarSyncStateGetRaw(initOverrides);
        return await response.value();
    }

}
